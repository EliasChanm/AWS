import os
import time
import json
import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

ec2_client = boto3.client('ec2')
ssm_client = boto3.client('ssm')

def lambda_handler(event, context):
    logger.info(f"Received event: {json.dumps(event)}")
    instance_id = event['detail']['instance-id']
    instance_ids = [instance_id]

    job_flow_id = os.getenv('JOB_FLOW_ID')
    if not job_flow_id:
        logger.error("Environment variable JOB_FLOW_ID is not set.")
        return

    for current_instance_id in instance_ids:
        response = ec2_client.describe_instances(InstanceIds=[current_instance_id])
        tags = response['Reservations'][0]['Instances'][0].get('Tags', [])

        has_task_role = False
        has_job_flow_id = False

        for tag in tags:
            if tag['Key'] == 'aws:elasticmapreduce:instance-group-role' and tag['Value'] == 'TASK':
                has_task_role = True
            if tag['Key'] == 'aws:elasticmapreduce:job-flow-id' and tag['Value'] == job_flow_id:
                has_job_flow_id = True

        if has_task_role and has_job_flow_id:
            logger.info(f"Instance {current_instance_id} matches both conditions.")
            wait_for_ssm_ready(instance_id)
            change_timezone(instance_id)
            break
        else:
            logger.info(f"Instance {current_instance_id} does not match both conditions.")

def wait_for_ssm_ready(instance_id):
    print(f"Waiting for SSM Agent to be online on instance {instance_id}...")
    while True:
        response = ssm_client.describe_instance_information(
            Filters=[{
                'Key': 'InstanceIds',
                'Values': [instance_id]
            }]
        )
        instance_info = response['InstanceInformationList']
       
        if instance_info and instance_info[0]['PingStatus'] == 'Online':
            print(f"Instance {instance_id} is ready for SSM commands.")
            break
        else:
            time.sleep(10)

def change_timezone(instance_id):
    timezone = os.getenv('TIMEZONE')
    command = f"sudo timedatectl set-timezone {timezone}"
    response = ssm_client.send_command(
        InstanceIds=[instance_id],
        DocumentName="AWS-RunShellScript",
        Parameters={"commands": [command]},
    )
    print(f"Sent timezone update command to instance {instance_id}")
